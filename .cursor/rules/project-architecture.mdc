---
description:
globs:
alwaysApply: false
---
# 项目架构规范

## Workspace 结构
这是一个基于 Cargo workspace 的多 crate Rust 项目，使用领域驱动设计 (DDD) 架构模式。

- `crates/ultimates/` - 核心基础库
- `crates/libs/` - 通用库
- `crates/lm/` - 语言模型相关
- `fusion/` - fusion-data 应用程序
- `guixu/` - 归墟流动 主应用程序

## 领域模型组织
每个领域模块使用目录结构：
```
domain/
├── user/
│   ├── mod.rs
│   ├── user_svc.rs
│   ├── user_bmc.rs
│   └── user_model.rs
├── auth/
│   ├── mod.rs
│   ├── auth_svc.rs
│   ├── auth_bmc.rs
│   └── auth_model.rs
└── ...
```

## 模块组织

### 模块声明
每个领域模块的 `mod.rs` 文件格式：
```rust
mod {module}_bmc;
mod {module}_model;
mod {module}_svc;

pub use {module}_bmc::*;
pub use {module}_model::*;
pub use {module}_svc::*;
```

### 测试组织
每个模型文件建议包含测试：
```rust
#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn test_{module}_models() {
    assert_eq!(TableNameIden::Table.as_ref(), "table_name");
    // 其他断言...
  }
}
```

## 依赖管理

### Workspace 依赖
优先使用 workspace 中定义的依赖：
```toml
dependency = { workspace = true }
```

### 必需 features
sqlx 必须包含所需的 features：
```toml
sqlx = { workspace = true, features = [
  "runtime-tokio",  # 运行时
  "chrono",         # 时间处理
  "json",           # JSON 支持
] }
```

## 新模块创建清单
创建新的领域模块时，确保：
1. 创建目录结构：`domain/{module}/`
2. 创建 `mod.rs` `{module}_model.rs` `{module}_bmc.rs` `{module}_svc.rs`
3. 在 `domain/mod.rs` 中声明模块
4. 添加必要的导入和 derive 宏
5. 编写单元测试验证表名映射
6. 添加中文注释说明表用途
7. 考虑字段索引和约束需求
