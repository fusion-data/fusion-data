syntax = "proto3";

package fusion_scheduler_api.v1;

import "ultimate_api/v1/type.proto";

service SchedulerApi {
  // 注册节点
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse);

  rpc CreateJob(CreateJobRequest) returns (CreateJobResponse);
  rpc UpdateJob(UpdateJobRequest) returns (UpdateJobResponse);

  rpc CreateTrigger(CreateTriggerRequest) returns (CreateTriggerResponse);
  rpc UpdateTrigger(UpdateTriggerRequest) returns (UpdateTriggerResponse);

  // 拉取任务
  rpc PullJob(PullJobRequest) returns (PullJobResponse);
}

message PullJobRequest {
  // 当前节点的 ID
  string node_id = 1;

  // 拉取的作业数量
  int32 fetch_count = 2;

  // 根据作业标签检索
  repeated string tags = 3;
}

message PullJobResponse {
  JobDefinition job_definition = 1;

  TriggerDefinition trigger_definition = 2;

  // 计算出的作业开始执行时间
  int64 begin_time = 4;
}

message RegisterNodeRequest {
  // 注册的当前节点 ID(uuid)，需要在集群内全局唯一
  string node_id = 1;

  // 节点的角色列表，可用于过滤作业类型
  repeated string roles = 2;
}

message RegisterNodeResponse {

}

// ---------------- Job types ----------------

message JobDefinition {
  enum JobType {
    // 未指定，无效值
    UNSPECIFIED = 0;
    // 脚本任务
    SCRIPT = 1;
    // HTTP 任务
    HTTP = 2;
    // Python 任务
    PYTHON = 3;
  }

  string job_id = 1;
  JobType job_type = 2;
  bytes data = 3;
  optional string description = 4;
  repeated string tags = 5;
}

message CreateJobRequest {
  JobDefinition.JobType job_type = 2;
  optional bytes data = 3;
  optional string description = 4;
  repeated string tags = 5;
  // 要关联的 Trigger ID
  repeated string trigger_ids = 6;
}

message CreateJobResponse { string job_id = 1; }

message UpdateJobRequest {
  string job_id = 1;
  optional JobDefinition.JobType job_type = 2;
  optional bytes data = 3;
  optional string description = 4;
  ultimate_api.v1.ArrayString tags = 5;
}

message UpdateJobResponse { string job_id = 1; }

// ---------------- Trigger types ----------------

message TriggerDefinition {
  enum TriggerType {
    // 未指定，无效值
    UNSPECIFIED = 0;
    // 简单触发器，每固定时间执行一次
    SIMPLE = 1;
    // Cron 触发器，根据 cron 表达式执行
    CRON = 2;
  }

  string trigger_id = 1;
  TriggerType trigger_type = 2;
  oneof schedule {
    SimpleSchedule simple = 3;
    CronSchedule cron = 4;
  }
  optional string description = 5;
  repeated string tags = 6;
  bytes data = 7;
}

message SimpleSchedule {
  // 设置每次执行间隔时间，单位为秒。值必需大于0！
  int64 interval_seconds = 1;

  // 设置第一次执行时延迟时间，单位为秒。
  int64 delay_seconds = 2;

  // 设置 job 执行的次数，负数代表无限制
  int32 repeat_count = 3;
}

message CronSchedule {
  string cron = 1;

  // 设置触发器有效的开始时间
  optional int64 begin_time = 2;

  // 设置触发器有效的结束时间
  optional int64 end_time = 3;
}

message CreateTriggerRequest {
  TriggerDefinition trigger_definition = 1;

  // 要关联的 Job ID
  repeated string job_ids = 2;
}

message CreateTriggerResponse { string trigger_id = 1; }

message UpdateTriggerRequest {
  string trigger_id = 1;
  oneof schedule {
    SimpleSchedule simple = 2;
    CronSchedule cron = 3;
  }
  optional bytes data = 4;
  optional string description = 5;
  ultimate_api.v1.ArrayString tags = 6;
}

message UpdateTriggerResponse {
  string trigger_id = 1;
}

// ---- Task ----
message JobTask {
  // 任务状态
  enum JobTaskStatus {
    UNSPECIFIED = 0;
    ENQUEUED = 1;
    RUNNING = 2;
    COMPLETED_SUCCESSFULLY = 3;
    COMPLETED_FAILED = 4;
  }
}
