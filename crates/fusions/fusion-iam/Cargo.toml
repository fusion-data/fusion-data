[package]
name = "fusion-iam"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
description.workspace = true
license.workspace = true
repository.workspace = true
publish = false

[[bin]]
name = "fusion-iam"
path = "src/bin/fusion-iam.rs"

[lints]
workspace = true

[profile.release]
lto = true
codegen-units = 1
panic = "abort"

[features]
default = ["tonic-reflection", "tonic-web"]
tonic-reflection = ["dep:tonic-reflection", "ultimate-grpc/tonic-reflection"]
tonic-web = ["dep:tonic-web", "ultimate-grpc/tonic-web"]
opentelemetry = ["ultimate/opentelemetry", "ultimate-grpc/opentelemetry"]

[dependencies]
# -- misc
serde = { workspace = true }
serde_json = { workspace = true }
serde_repr = { workspace = true }
chrono = { workspace = true }
rust_decimal = { workspace = true }
derive_more = { workspace = true }
derive-getters = { workspace = true }
typed-builder = { workspace = true }
enum-iterator = { workspace = true }
o2o = { workspace = true }
uuid = { workspace = true }

# -- ultimates
ultimate-common = { workspace = true }
ultimate = { workspace = true, features = ["tonic"] }
ultimate-api = { workspace = true }
ultimate-grpc = { workspace = true }
ultimate-db = { workspace = true }

# -- fusions
fusiondata = { workspace = true }
fusiondata-context = { workspace = true }

# -- tokio & async
tokio = { workspace = true }
futures = { workspace = true }
async-stream = { workspace = true }

# -- tracing
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
tracing-log = { workspace = true }

# -- db
sqlx = { workspace = true }
sea-query = { workspace = true }
sea-query-binder = { workspace = true }

# -- grpc https://crates.io/crates/tonic
tower-http = { workspace = true }
tonic = { workspace = true }
tonic-types = { workspace = true }
tonic-web = { workspace = true, optional = true }
tonic-reflection = { workspace = true, optional = true }
prost = { workspace = true }
prost-types = { workspace = true }

# -- qrcode
qrcode-rs = { workspace = true }
image = { workspace = true }

# -- memory allocator
[target.'cfg(not(target_env = "msvc"))'.dependencies]
tikv-jemallocator = { workspace = true, optional = true }

[dev-dependencies]
pretty_assertions.workspace = true
hyper = { workspace = true }
hyper-util = { workspace = true }
tower = { workspace = true }
ultimate-macros = { workspace = true }

[build-dependencies]
tonic-build = { workspace = true, features = ["prost"] }
