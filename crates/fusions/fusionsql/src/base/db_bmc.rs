use fusionsql_core::{filter::OrderBys, sea_utils::SIden};
use sea_query::{IntoIden, TableRef};

/// The DbBmc trait must be implemented for the Bmc struct of an entity.
/// It specifies meta information such as the table name,
/// whether the table has timestamp columns (created_by, created_at, updated_by, updated_at), and more as the
/// code evolves.
///
/// Note: This trait should not be confused with the BaseCrudBmc trait, which provides
///       common default CRUD BMC functions for a given Bmc/Entity.
pub trait DbBmc {
  const TABLE: &str;
  const SCHEMA: Option<&str> = None;
  const LIST_LIMIT_DEFAULT: u64 = super::LIST_LIMIT_DEFAULT;
  const LIST_LIMIT_MAX: u64 = super::LIST_LIMIT_MAX;
  const COLUMN_ID: &str = "id";
  /// Is the ID generated by the program during creation
  const ID_GENERATED_BY_DB: bool = false;
  // type IdType;

  fn table_ref() -> TableRef {
    match Self::SCHEMA {
      Some(schema) => TableRef::SchemaTable(SIden(schema).into_iden(), SIden(Self::TABLE).into_iden()),
      None => TableRef::Table(SIden(Self::TABLE).into_iden()),
    }
  }

  fn qualified_table() -> (&'static str, &'static str) {
    (Self::SCHEMA.unwrap_or("public"), Self::TABLE)
  }

  fn qualified_table_name() -> String {
    match Self::SCHEMA {
      Some(schema) => format!("{}.{}", schema, Self::TABLE),
      None => Self::TABLE.to_string(),
    }
  }

  /// Specifies that the table for this Bmc has timestamps (created_by, created_at, updated_by, updated_at) columns.
  /// This will allow the code to update those as needed.
  ///
  /// default: true
  fn _has_created_at() -> bool {
    true
  }

  fn _has_created_by() -> bool {
    true
  }

  /// default: true
  fn _has_updated_at() -> bool {
    true
  }

  fn _has_updated_by() -> bool {
    true
  }

  /// default: false
  fn _use_logical_deletion() -> bool {
    false
  }

  /// Specifies if the entity table managed by this BMC
  /// has an `owner_id` column that needs to be set on create (by default ctx.user_id).
  ///
  /// default: false
  fn _has_owner_id() -> bool {
    false
  }

  /// default: false
  fn _has_optimistic_lock() -> bool {
    false
  }

  fn _default_order_bys() -> Option<OrderBys> {
    None
  }
}
