syntax = "proto3";

package fusion_flow_api.v1;

option java_multiple_files = false;
option java_package = "xyz.fusiondata.flow.api";
option go_package = "./;pb";

import "ultimate_api/v1/types.proto";

service SchedulerApi {
  // 获取所有 flows
  rpc ListSchedulers(ListSchedulersRequest) returns (ListSchedulersResponse);

  // 创建流程定义
  rpc CreateProcess(CreateProcessRequest) returns (CreateProcessResponse);

  // 创建触发器定义
  rpc CreateTrigger(CreateTriggerRequest) returns (CreateTriggerResponse);

  // 更新触发器定义
  rpc UpdateTrigger(UpdateTriggerRequest) returns (UpdateTriggerResponse);

  rpc EventListener(stream EventRequest) returns (stream EventResponse);
  rpc PullJob(PullJobRequest) returns (PullJobResponse);
}

message ListSchedulersRequest {}

message ListSchedulersResponse {
  repeated SchedNode schedulers = 1;
}

// ---------------- process types ----------------

message ProcessDefinition {
  enum ProcessStatus {
    // 未指定，无效值
    UNSPECIFIED = 0;
    // 禁用
    DISABLED = 99;
    // 启用
    ENABLED = 100;
  }

  string id = 1;
  ProcessStatus status  = 2;
  string variables = 3;
  optional bytes data = 4;
  optional string description = 5;
  repeated string tags = 6;
  // 流程超时时间（秒）
  int64 timeout = 7;
}

// 创建流程定义请求。
//
// 注意：创建流程时，process_id 和 description 至少一个非空。
message CreateProcessRequest {
  // 可选，不填则自动生成（默认使用 UUID）
  optional string process_id = 1;
  optional string description = 2;
  ultimate_api.v1.ArrayString tags = 3;
  // 任务变量，json object 类型。默认为空JSON对象（`{}`）
  optional string variables = 4;
  // 可选的流程任务数据，由流程自行决定序列化方式
  optional bytes data = 5;
  // 可选的关联触发器 ID 列表
  ultimate_api.v1.ArrayString trigger_ids = 6;
}

message CreateProcessResponse {
  ProcessDefinition process = 1;
}

// ---------------- Trigger types ----------------

message TriggerDefinition {
  enum TriggerKind {
    // 未指定则默认为：固定速率
    TRIGGER_KIND_UNSPECIFIED = 0;
    // 固定速率
    FIXED_RATE = 1;
    // 固定延迟
    FIXED_DELAY = 2;
  }

  enum TriggerStatus {
    // 未指定则默认为：ACTIVE
    TRIGGER_STATUS_UNSPECIFIED = 0;

    // 已禁用
    DISABLED = 99;

    // 触发器已启用
    ENABLED = 100;

    // 触发器已完成，通常在次数上限或结束时间达到时为此状态
    COMPLETED = 200;
  }

  string id = 1;
  TriggerStatus status = 2;
  TriggerKind kind = 3;
  optional string variables = 4;
  oneof schedule {
    SimpleSchedule simple = 5;
    CronSchedule cron = 6;
    bool depend = 7;
  }
  optional string description = 10;
  ultimate_api.v1.ArrayString tags = 11;

  // 超时时间（秒），触发器可以覆盖关联 ProcessDefinition 的 timeout 值
  optional int64 timeout = 12;

  // 设置触发器有效的开始时间
  optional int64 begin_time = 13;

  // 设置触发器有效的结束时间
  optional int64 end_time = 14;
}

message SimpleSchedule {
  // 设置每次执行时间隔。值必需大于0！
  // https://crates.io/crates/duration-str
  string interval = 1;

  // 设置第一次执行时延迟时间，单位为秒。
  // https://crates.io/crates/duration-str
  string first_delay = 2;

  // 设置 job 执行的次数，不设置则代表无限制
  optional int64 execution_count = 3;
}

message CronSchedule {
  // cron 表达式，详情参考 https://crontab.guru/ 和 https://crates.io/crates/croner
  string cron = 1;
  // 时区。未指定则所运行操作系统的本地时区。
  optional string tz = 2;
}

message CreateTriggerRequest {
  // 要关联的 ProcessDefinition ID 列表
  repeated int64 process_ids = 1;

  string trigger_key = 2;
  TriggerDefinition.TriggerKind trigger_kind = 3;
  optional string variables = 4;
  oneof schedule {
    SimpleSchedule simple = 5;
    CronSchedule cron = 6;
  }
  optional string description = 7;
  repeated string tags = 8;
  optional int64 valid_time = 9;
  optional int64 invalid_time = 10;
}

message CreateTriggerResponse {
  TriggerDefinition trigger = 1;
}

message UpdateTriggerRequest {
  int64 trigger_id = 1;
  oneof schedule {
    SimpleSchedule simple = 2;
    CronSchedule cron = 3;
  }
  optional bytes data = 4;
  optional string description = 5;
  ultimate_api.v1.ArrayString tags = 6;
  optional string trigger_key = 7;
  optional string variables = 8;
}

message UpdateTriggerResponse {
  string trigger_id = 1;
}

// ---- Instance & Task ----
message ProcessInstance {
  // 任务状态
  enum InstanceStatus {
    UNSPECIFIED = 0;
    // 已入队
    ENQUEUED = 1;
    // 运行中
    RUNNING = 2;
    // 错误完成
    COMPLETED_FAILED = 90;
    // 被取消
    CANCELED = 99;
    // 成功完成
    COMPLETED_SUCCESSFULLY = 100;
  }
}

// XXX worker 不需要感知 ProcessTask，这里仅做定义
message Task {
  enum TaskKind {
    // 未指定，无效值
    UNSPECIFIED = 0;
    // Rust 代码任务
    RUST = 1;
    // 脚本任务
    SCRIPT = 2;
    // HTTP 任务
    HTTP = 3;
    // Python 任务
    PYTHON = 4;
    // SQL 任务
    SQL = 5;
  }

}

// 任务作业
message TaskJob {
  enum JobStatus {
    UNSPECIFIED = 0;
    CREATED = 1;
    ENQUEUED = 2;
    // 错误完成
    COMPLETED_FAILED = 90;
    // 被取消
    CANCELED = 99;
    // 成功完成
    COMPLETED_SUCCESSFULLY = 100;
  }

  string task_id = 1;
  Task.TaskKind task_kind = 2;
}


// ---- SchedNode ----
message SchedNode {
  enum NodeStatus {
    NODE_STATUS_UNSPECIFIED = 0;
    UNHEALTHY = 90;
    DISABLED = 99;
    HEALTHY = 100;
  }

  enum NodeKind {
    NODE_KIND_UNSPECIFIED = 0;
    SCHEDULER = 1;
    WORKER = 2;
  }

  string node_id = 1;
  string advertised_addr = 2;
}

// ----

message MasterInfo {
  string master_id = 1;

  // 当前 master 节点的 IP:PORT 地址
  string master_addr = 2;

  // Master 节点可执行的 namespace 列表
  repeated string namespaces = 5;
}

enum EventKind {
  HEARTBEAT = 0;

  // 注册监听器
  REGISTER_LISTENER = 1;

  // 主节点丢失
  MASTER_MISSING = 2;

  // 节点状态变更
  NODE_CHANGED = 3;

  // push
  JOB_TASK_TRIGGERED = 20;
  // pull
  JOB_TASK_COMPLETED = 21;
}

message EventRequest {

}

message EventResponse {
  EventKind event_kind = 1;
  optional bytes payload = 2;
}

message PullJobRequest {
  // 当前节点的 ID
  string node_id = 1;

  // 拉取的作业数量
  int32 fetch_count = 2;

  // 根据作业标签检索
  repeated string tags = 3;
}

message PullJobResponse {
  ProcessDefinition process_definition = 1;

  TriggerDefinition trigger_definition = 2;

  // 计算出的作业开始执行时间
  int64 begin_time = 4;
}
